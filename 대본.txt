표지

지금부터 업무성과 발표를 시작하겠습니다.

안녕하십니까 저는 기술 7부의 김민수 연구원입니다.


목차

오늘 제가 발표할 내용은 LumirRecuritingInterviewManager LRIM 프로젝트에 관한 것으로 간략하게 목차를 통해 성과 발표 전체 흐름을 말씀드리겠습니다.


첫째 개요에서는 LRIM 프로젝트를 진행하게 된 배경에 대해 설명하며, 프로젝트 목적을 공유할 예정입니다.

둘째 요구사항 분석 단계에서는 경영지원팀으로 부터 받은 요구사항 리스트와  개발 핵심 포인트를 들여다 보겠습니다.

셋째 설계 단계에서는 LRIM의 구조와 데이터베이스 , API 설계에 대해 말씀드리겠습니다.

넷째 개발 과정에서는 관리자 관점에서 UI, 서버, 메일서버로 이어지는 시퀀스 다이어그램과 채용프로세스의 전체흐름을 볼수 있는 상태다이어그램,
 품질 관리를 위해 어떤 테스트 및 커버리지를 공유하겠습니다.

다섯째, 업무성과 및 회고 에서는 LRIM 프로젝트를 통해 달성환 성과와 배운점에 대해 이야기하겠습니다.

마지막으로 SARDIP개발계획에서는 앞으로 제가 담당하게될 SARDIP의 업무에 대해 말씀드리겠습니다.

개요

경영지원팀은 기존에 채용 플랫폼을 통해 지원자의 서류를 분류하고 이사님께 이력서를 보내는 방식으로 면접 대상자를 선정해 왔습니다. 이후 면접관님들의 가능한 시간을 확인하고 지원자와 면접 일정을 조율하여 기존의 인터뷰 시스템에 데이터를 입력하고 면접 보고서를 작성하는 과정이 이어졌습니다.

이러한 방식은 채용 플랫폼에 대한 높은 의존도와 데이터의 수기 입력, 그리고 면접 일정 조율의 어려움 등 여러 문제점을 안고 있었습니다. 이에 저희는 더 나은 채용 관리를 위해 새로운 시스템 개발에 착수하게 되었습니다. 이 시스템은 복잡한 채용 관리 프로세스를 효율적으로 처리하도록 설계되었으며, 이를 통해 경영지원팀의 인사 관리 부담을 크게 줄일 수 있을 것으로 기대하고 있습니다.

개발자로서 이러한 과제를 수행함으로써 저희 팀의 역량 또한 한층 더 성장할 수 있었다고 생각합니다. 저희가 개발한 시스템이 실제로 팀의 업무 효율을 얼마나 개선하였는지에 대해서는 계속해서 관찰하고, 필요한 개선을 추가로 진행할 예정입니다. 


요구사항 분석

우선적으로 채용에서 발생하는 다양한 업무의 복잡성을 간소화하고, 모든 과정을 하나의 흐름 안에서 통합적으로 관리할 수 있는 
체계적인 시스템이 필요했습니다.
또한 면접관, 평가자분들이 보고서 및 평가서를 쉽게 작성하고 관리할 수 있는 기능이 필요 했습니다.
면접 일정 관리의 편리성도 중요한 요소였습니다. 관리자와 면접관 모두에게 유연하고 간편한 일정 설정 및 조정 기능이 필요했습니다.
이외에도 Man-Month 절감을 위한 작업시간의 단축, 중요 이벤트 발생시 알람 제공, 보고서 평가서 문서화 기능등이 필요했습니다.

개발 핵심 포인트

요구사항을 분석한 후, 저희는 다음과 같은 핵심 개발 포인트들을 설정하고 설계 단계에 착수하기로 결정하였습니다.

첫 번째로, ‘시스템화 및 효율적인 프로세스 관리’를 핵심 요소로 삼았습니다. 복잡한 인사 채용 프로세스를 체계적으로 관리할 수 있도록 전용 시스템을 설계하는 것이 필요했습니다. 이를 위해 채용 관리를 위한 전용 데이터베이스 구축을 계획하였고, 모든 채용 정보를 중앙에서 효율적으로 관리할 수 있도록 하는 방안을 마련하였습니다. 또한, 다양한 업무와 복잡한 채용 프로세스를 일관되게 관리할 수 있도록 설계하였습니다. 

두 번째로, ‘자동화’에 집중하기로 했습니다. 반복적이고 시간 소모적인 작업을 줄이기 위하여, 알람을 자동으로 전송하고 보고서와 평가서를 PDF 형식으로 자동 생성하는 기능을 설계하였습니다. 이 자동화 기능은 작업 효율성을 크게 향상시킬 것으로 기대하였습니다.

마지막으로, ‘사용자 경험’을 최우선으로 고려했습니다. 시스템의 인터페이스를 사용자가 직관적으로 이해하고 쉽게 접근할 수 있도록 설계하였습니다. 인터페이스 디자인에 큰 중점을 두어 사용자의 편의성을 최대한 보장하기로 하였습니다.

이러한 핵심 포인트들을 바탕으로 설계 단계에 착수하였으며, 이후의 개발 과정에서 이 계획들을 실제로 구현하는 데 집중하였습니다.

설계

아키텍처 설계
저희는 모놀리식 아키텍처를 선택하였습니다. 일관된 개발환경을 통해 빠른 개발과 배포를 가능하게 합니다
node.js 단일 언어와 express프레임워크를 사용함으로써 효율적으로 시스템을 관리할 수 있었고,
 mongoDB를 도입하여 데이터베이스 솔루션의 유연성을 확보했습니다.
mongoDB의 문서지향적 특성 덕분에 변화하는 요구사항에 민첩하게 대응할 수 있는 기반을 제공했습니다.

데이터베이스 설계

데이터베이스 설계에 대해 살펴 보겠습니다. 
이 다이어그램은 몽고디비를 사용하여 설계한 데이터베이스 스키마의 모습입니다.
몽고디비는 노에스큐엘 문법을 활용해 유연한 스키마를 가능하게 하며 이는 변화하는 요구사항에 신속하게 대응할 수 있도록 해줍니다.
특히 객체 지향 프로그래밍과  높은 호환성을 지닌 덕분에 개발 속도를 크게 향상시켰습니다.
데이터를 조회하고 추가하는 일이 빈번한 채용 시스템에서는 몽고디비가 뛰어난 성능을 발휘합니다.


api 설계

api설게 부분에서는 RESTful 원칙을 따르는 api 디자인에 중점을 두었습니다.
restful api는 데이터를 교환하기위한 일련의 규칙과 약속으로 시스템간에 정보를 전달하는 방식을 말합니다.
저희의 엔드포인트를 기준으로 예를 들자면
get은 채용포지션을 조회하고 post는 새로운 채용 포지션을 생성할 때 사용합니다.
그리고 엔드 포인트를 실제로 실행하고 테스트할 수 있는 Swagger UI를 활용하였습니다.

개발 과정

개발과정에서 채용프로세스를 살펴보겠습니다.

채용과정을 효과적으로 관리하기위해 stage를 나누어 절차를 정립했습니다.
첫번째 다이어그램은 관리자 관점에서 ui, 서버, 메일서버로 이어지는 시퀀스 다이어그램 입니다.
관리자가 지원자를 생성하는것부터 면접일정 조율 지원자의 입사자로의 전환된 뒤 2차 평가서 작성까지의 관리자에서의 흐름을 확인 가능합니다.
두번째 다이어그램은 전체 채용 프로세스의 상태다이어그램으로 지원대기부터 프로세스가 종료 되는 전체적인 흐름과 상태를 보실 수 있습니다.
각 상태는 다음단계로 전환되기 전에 필요한 조건들이 충죽되도록 개발 되었습니다.

테스트 및 커버리지

먼저 테스트에 대해 말씀 드리겠습니다.
테스트는 단위 테스트와 통합테스트를 구분하여 진행하였습니다.
단위테스트는 모의로 데이터를 만들어 개별 코드 단위의 정확성을 검증하는 테스트이며 
통합 테스트는 서로 다른 모듈이나 서비스가 통합될 때의 전체 흐름과 데이터 교환의 정확성을 검증합니다.

다음은 테스트 커버리지 입니다.

테스트 커버리지는 실시한 테스트가 얼마나 많이 작성된 실제 코드를 실행하고 있는지 측정하는 지표입니다.
보여드리고 있는 이 스크린샷을 보시는 것처럼 모든 모듈에서 100% 커버리지를 달성하지는 않았습니다.
이는 해당 모듈의 특정 부분이 예외적인 경우나 아직 발생하지 않은 시나리오를 대비한 코드를 포함하기 때문입니다.
개발을하며 가장 많은 시간을 들인 부분이 테스트 코드를 작성하는 부분이기도 했고, 효율성도 중요하기 때문에 
발생할 가능성이 낮은 경로에 대해서는 테스트를 실시 하지 않고 좀 더 중요한 기능과 사용자에게 영향을 미칠 수 잇는 부분에 대한
테스트에 좀더 집중을 하였습니다.

업무 성과 및 회고 입니다.

업무성과 부터 말씀 드리겠습니다.
첫번째는 지원자가 직접 지원함으로써 모든 데이터는 서버에 자동 저장되고, 이는 직접 분류하고 입력하던 과거의 번거로운 작업들을 대체했습니다.
또한 실시간 알람을 통해 이벤트 발생시 즉각적인 통지를 가능하게 하여 업무 스케줄관리와 응답성을 높였습니다.
두번째로 깃랩 CI/CD 워크플로우를 통해 개발 프로세스를 자동화하였습니다. 코드의 커밋부터 배포까지 모든 단계가 자동으로 이루어지며
이를 통해 발생하는 오류에 빠르게 대처할수 있게 되었습니다.


프로젝트 회고 입니다.

회사의 중요한 사업과 관련된 프로젝트를 한다는 것에 대해 잘 못하면 어쩌지 하는 막연한 불안감이 존재했습니다.
하지만 LRIM 사이드 프로젝트를 하며 자신감도 얻고 java를 주언어로 사용하던 제가 javascript로 전환 하는데
많은 기술적 도움이 되었습니다.
또한 사용자의 요구와 개발자의 시각 사이의 격차를 파악하는 중요한 인사이트를 얻었습니다.
이로써 사용자와의 소통의 가치를 다시한번 알게 되었고 앞으로 나아갈 방향을 설정하는데 중요한 경험이 되었습니다.


마지막으로 사딥 개발 계획에 대해 말씀 드리겠습니다.

앞으로 제가 담당하게 될 업무는 사딥의 관리자 전용 서버입니다.
우선 개발 전략으로는 모놀리식 아키텍처를 기반으로 서버를 구축할 계획입니다. 
LRIM 프로젝트를 경험하여 식별된 리스크를 예방하고 관리하는데 많은 도움이 될것 같습니다.
개발 프로세스는 지속적이 코드 리뷰와 피드백을 통해 코드의 품질을 지속적으로 개선하고 기능 업데이트를 촉진하는 중점을 둘것입니다.
오류를 미연에 방지하고, 안정적인 서비스 운영을 보장하는 기본 원칙입니다.
















