표지

지금부터 업무성과 발표를 시작하겠습니다.

안녕하십니까 저는 기술 7부의 김민수 연구원입니다.

오늘 제가 발표할 내용은 LumirRecuritingInterviewManager LRIM 프로젝트에 관한 것으로 간략하게 목차를 통해 성과 발표 전체 흐름을 말씀드리겠습니다.

목차

여섯 가지의 항목으로
개요, 요구사항분석, 설계, 개발 과정, 업무성과 및 회고, SARDIP 개발 계획으로
나누어 발표를 진행하겠습니다.

개요

경영지원팀은 기존에 채용 플랫폼을 통해 지원자의 서류를 분류하고 이사님께 이력서를 보내는 방식으로 면접 대상자를 선정해 왔습니다. 이후 면접관님들의 가능한 시간을 확인하고 지원자와 면접 일정을 조율하여 기존의 인터뷰 시스템에 데이터를 입력하고 면접 보고서를 작성하는 과정이 이어졌습니다.

이러한 방식은 채용 플랫폼에 대한 높은 의존도, 지원자의 정보 보존 및 관리 단계에서의 소실 가능성, 데이터의 수기 입력, 그리고 면접 일정 조율의 어려움 등 여러 문제점을 안고 있었습니다. 이에 저희는 채용 관리를 개선하고 경영지원팀의 인사 관리 부담을 줄이기 위한 새로운 맞춤 솔루션 채용 시스템 개발에 착수했습니다.

이 시스템은 복잡한 채용 관리 프로세스를 효율적으로 처리할 수 있도록 계획했습니다.
이를 통해 경영지원팀의 인사 관리 부담을 크게 줄이는 동시에, 개발자들의 역량이 한층 더 성장할 수 있을 것으로 기대했습니다.


요구사항 분석

경영지원팀으로부터 받은 요구사항은 7가지 정도로 간추릴수 있었습니다.
채용 프로세스 기능 개발, 편의성 높은 시스템 개발, 편리한 일정 관리, 맨먼스 절감, 알람 제공, 문서화 기능, 권한 관리
우선적으로 채용에서 발생하는 다양한 업무의 복잡성을 간소화하고, 모든 과정을 하나의 흐름 안에서 통합적으로 관리할 수 있는 
체계적인 시스템이 필요했습니다. 그리고 이 시스템 안에는 관리자와 면접관 권한에 따른 데이터 접근 제한과
면접관, 평가자분들이 보고서 및 평가서를 쉽게 작성하고 관리할 수 있어야 했으며, 
관리자와 면접관 모두에게 유연하고 간편한 일정 설정 및 조정이 가능해야 했습니다. 그리고 이런 이벤트들이 발생할 때마다 즉각적인 알람 제공이 필요했습니다.
최종적으로 이 프로세스를 따를 때 인사 채용 부분에서 작업 시간 크게 절감이 되어야 했습니다.

개발 핵심 포인트

저희는 다음과 같은 핵심 개발 포인트들을 설정하고 설계 단계에 착수하기로 결정했습니다.

첫 번째로, ‘시스템화 및 효율적인 프로세스 관리’를 핵심 요소로 삼았습니다. 복잡한 인사 채용 프로세스를 체계적으로 관리할 수 있도록 전용 시스템을 계획했습니다. 이를 위해 채용 관리를 위한 전용 데이터베이스 구축을 구상하였고, 모든 채용 정보를 중앙에서 효율적으로 관리할 수 있는 방안을 마련하였습니다. 또한, 다양한 업무와 복잡한 채용 프로세스를 일관되게 관리할 수 있도록 준비하였습니다.

두 번째로, ‘자동화’에 집중하기로 했습니다. 반복적이고 시간 소모적인 작업을 줄이기 위해, 알람을 자동으로 전송하고 보고서와 평가서를 PDF 형식으로 자동 생성하는 기능을 개발하는 계획을 세웠습니다.

마지막으로, ‘사용자 경험’을 최우선으로 고려했습니다. 시스템의 인터페이스를 사용자가 직관적으로 이해하고 쉽게 접근할 수 있도록 디자인했습니다. 인터페이스 디자인에 큰 중점을 두어 사용자의 편의성을 최대한 보장하는 것을 목표로 삼았습니다.



설계

아키텍처 설계
저희는 모놀리식 아키텍처를 선택하였습니다.
모놀리식 아키텍처는 애플리케이션의 모든 기능과 컴포넌트를 단일 코드베이스에서 실행하며, 한 번에 하나의 배포 단위로 운영되는 구조입니다.
 이를 통해 일관된 개발 환경을 구축하고, 빠른 개발과 배포를 가능하게 합니다.

Node.js 단일 언어와 Express.js 프레임워크를 사용함으로써 효율적으로 시스템을 관리할 계획이었습니다.
또한 MongoDB를 도입하여 데이터베이스 솔루션의 유연성을 제공하고자 했고,
MongoDB의 문서 지향적 특성 덕분에 변화하는 요구사항에 민첩하게 대응할 수 있는 기반을 마련할 수 있을 것이라 예상하고 설계하였습니다.

데이터베이스 설계

데이터베이스 설계에 대해 살펴 보겠습니다. 
이 다이어그램은 몽고디비를 사용하여 설계한 데이터베이스 스키마의 모습입니다.
몽고디비는 노에스큐엘 문법을 활용해 유연한 스키마를 가능하게 하며 이는 변화하는 요구사항에 신속하게 대응할 수 있도록 해줍니다.
특히 객체 지향 프로그래밍과  높은 호환성을 지닌 덕분에 개발 속도를 크게 향상시킬 수 있습니다.
데이터를 조회하고 추가하는 일이 빈번한 채용 시스템에서는 몽고디비가 뛰어난 성능을 발휘하여 몽고 디비를 사용하여 설계하게 되었습니다.

NO-SQL: NO-SQL 데이터베이스는 관계형 데이터베이스에 비해 스키마에 구애받지 않고 데이터를 저장하고 관리할 수 있으며, 문서 지향, 키-값, 그래프 등의 다양한 유형으로 데이터를 다룰 수 있습니다.
유연한 스키마의 장점: NO-SQL 데이터베이스는 유연한 스키마를 통해 데이터 구조를 동적으로 변경할 수 있어, 변화하는 비즈니스 요구사항에 신속하게 대응할 수 있습니다.
객체지향 프로그래밍과의 호환성: NO-SQL 데이터베이스는 객체지향 프로그래밍의 데이터 구조와 직접 매핑이 가능하여, 개발자가 객체를 그대로 데이터베이스에 저장할 수 있어 코드 작성 및 관리가 단순해져 개발 속도가 향상됩니다.


api 설계

API 설계 부분에서는 RESTful 원칙을 따르는 API 디자인에 중점을 두었습니다. RESTful API는 데이터를 교환하기 위한 일련의 규칙과 약속으로, 시스템 간에 정보를 전달하는 방식을 제공합니다.

이를 저희 엔드포인트를 기준으로 예를 들자면, GET은 채용 포지션을 조회하고, POST는 새로운 채용 포지션을 생성할 때 사용됩니다.
또한 엔드포인트를 실제로 실행하고 테스트할 수 있는 Swagger UI를 활용하여 API의 동작을 검증했습니다.

Swagger를 활용한 이 API 문서는 프론트엔드가 백엔드에 어떤 요청을 보냈을 때 어떤 데이터를 받을 수 있는지에 대한 정보를 담고 있어, 개발 과정에서 중요한 문서로 간주됩니다.

개발 과정

개발과정에서 채용프로세스를 살펴보겠습니다.

채용 프로세스를 효과적으로 관리하기 위해 지원자를 단계별로 나누어 채용 전체 프로세스를 구상하고 개발하였습니다.

첫 번째 다이어그램은 관리자 관점에서 지원자의 단계에 따라 UI, 서버, 메일 서버로 이어지는 시퀀스 다이어그램입니다.
관리자가 지원자를 생성하는 것부터 면접 일정 조율, 지원자의 입사자로의 전환, 2차 평가서 작성까지의 흐름을 보여줍니다.

두 번째 다이어그램은 전체 채용 프로세스의 상태 다이어그램으로, 지원 대기부터 프로세스 종료까지의 전체 흐름과 상태를 보여줍니다.
각 상태는 다음 단계로 전환되기 전에 필요한 조건들이 충족되도록 개발하였습니다.

테스트 및 커버리지

먼저 테스트에 대해 말씀 드리겠습니다. 테스트는 단위 테스트와 통합 테스트를 구분하여 진행하였습니다. 
단위 테스트는 모의로 데이터를 만들어 개별 코드 단위의 정확성을 검증하는 테스트이며, 
통합 테스트는 서로 다른 모듈이나 서비스가 통합될 때의 전체 흐름과 데이터 교환의 정확성을 검증합니다.

오른쪽 위의 테스트는 단위 테스트로, 지원자의 이력서를 다운로드하는 상황에서 다운로드할 파일이 존재하지 않을 때 오류를 처리하는 테스트입니다. 
Jest라는 함수로 테스트 코드 이외의 함수들의 리턴값을 만들어 보내어 개별 코드를 검증하고 있습니다.

통합 테스트는 평가자를 수정하는 API 요청에 대한 검증을 수행합니다. 
모의로 평가자 정보를 만들어 평가자 수정 API 요청에 보내어 검증하는 코드입니다.

다음은 커버리지 입니다.

테스트 커버리지는 실시한 테스트가 얼마나 많은 작성된 실제 코드를 실행하고 있는지 측정하는 지표입니다. 
보여드리고 있는 이 스크린샷을 보시는 것처럼 모든 모듈에서 100% 커버리지를 달성하지는 않았습니다. 
이는 서버가 실행된 직후에 확인 가능한 코드들과 아직 발생하지 않은 시나리오를 대비한 코드를 포함하기 때문입니다.

따라서 평균 90% 이상의 커버리지를 목표로 개발을 진행하였습니다.
 이를 통해 주요 기능들의 안정성을 확보하고, 실시간 운영 중 발생할 수 있는 다양한 상황에 대비하였습니다.

업무 성과 및 회고 입니다.
업무 성과에 대해 말씀 드리겠습니다.

첫째, 지원자가 직접 지원함으로써 모든 데이터는 서버에 자동 저장되며,
이는 직접 분류하고 입력하던 과거의 번거로운 작업들을 대체했습니다.

둘째, 면접관, 평가자분들이 보고서 및 평가서를 쉽게 작성하고,
 PDF 문서로 자동 변환이 가능하게 구현하였습니다.

셋째, 실시간 알람을 통해 이벤트 발생 시 즉각적인 통지를 가능하게 하여 업무 스케줄 관리와 응답성을 높였습니다.

마지막으로, 깃랩 CI/CD 워크플로우를 통해 개발 프로세스를 자동화하였습니다. 
코드의 커밋부터 배포까지 모든 단계가 자동으로 이루어지며, 이를 통해 발생하는 오류에 빠르게 대처할 수 있게 되었습니다.


프로젝트 회고 입니다.

제가 주 언어로 Java를 사용해 와서, JavaScript에 대해서는 익숙하지 않았습니다.
하지만 본 프로젝트에 투입되기 전 LRIM 사이드 프로젝트를 통해 JavaScript의 숙련도를 크게 향상시키며 자신감을 얻었습니다.

이전까진 개발 구조에서 레이어 단위의 구조를 사용해 왔는데,
SARDIP 프로젝트에서는 모듈 단위의 구조를 사용한다는 얘기를 들었습니다. 
이를 통해 모듈 단위 구조를 미리 경험하고 모듈 내에서도 레이어 구조와 마찬가지로 계층을 나누어 관리하기 때문에 재사용성이 높은점과
변화하는 요구사항에 신속하게 대응할수 있는점 등
이점을 파악할 수 있는 좋은 기회가 되었습니다.

또한, 사용자와 개발자 간의 시각 차이를 인식하고, 그 격차를 줄이기 위해 사용자의 요구에 귀 기울이는 것이 중요하다는 인사이트를 얻었습니다.
이 소통의 가치를 다시 한번 깨닫게 되면서 앞으로 나아갈 방향을 설정하는 데 도움이 되었습니다.

LRIM 프로젝트 개발 경험은 SARDIP 프로젝트 개발의 좋은 밑거름이 되리라 생각합니다.


마지막으로 사딥 개발 계획에 대해 말씀 드리겠습니다.

마지막으로 SARDIP에서 담당하게 될 업무에 대해 말씀 드리겠습니다.
제가 담당할 업무는 SARDIP의 관리자 전용 서버입니다.
개발 전략으로는 모놀리식 아키텍처를 기반으로 서버를 구축할 계획입니다.
현재는 종식프로의 기획 단계에 있으며, 기획이 마무리되는 대로 2~3주 정도의 설계 기간을 거쳐 개발에 들어갈 예정입니다.
개발 프로세스에서는 지속적인 코드 리뷰와 피드백을 통해 코드 품질을 향상시키고, 
기능 업데이트를 촉진하는 데 중점을 둘 것입니다. 
LRIM과 마찬가지로 테스트 커버리지를 90% 이상 유지하여 오류를 방지하고 안정적인 서비스 운영을 위해 최선을 다하겠습니다.











